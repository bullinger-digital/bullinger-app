<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Bullinger ODD</title>
                <title type="short">Bullinger ODD</title>
            </titleStmt>
            <publicationStmt>
                <publisher>JinnTec GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Default customization generated by <ref target="http://tei-publisher.com">TEI
                        Publisher</ref>, extending tei_simplePrint.odd.</p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="bullinger.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2017-09-08">adjust metadata in teiHeader</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="bullinger" source="teipublisher.odd">
               
            <elementSpec ident="graphic" mode="change">
                    <model predicate="$parameters?view = &#34;facsimile&#34;" behaviour="inline">
            <param name="facs" value="encode-for-uri(@url)"/>
            <param name="label" value="@n"/>
            <pb:template xmlns="" xml:space="preserve"><pb-facs-link emit="transcription" facs="[[facs]]"/></pb:template>
        </model>
                    <model behaviour="graphic">
            <param name="url" value="@url"/>
            <param name="width" value="@width"/>
            <param name="height" value="@height"/>
            <param name="scale" value="@scale"/>
            <param name="title" value="desc"/>
        </model>
                </elementSpec>
            <elementSpec ident="teiHeader" mode="change">
                    <modelSequence predicate="$parameters?view='metadata'">
            <desc>TEI Header Data for Bullinger Letters</desc>
            <model behaviour="section">
                <desc>TEI Title</desc>
                <param name="level" value="1"/>
                <param name="sender" value="let $items := for $item in .//correspAction[@type = &#34;sent&#34;]/*   return typeswitch($item)      case element(persName)         return           let $persName := $parameters?persons/persName[@xml:id = $item/@ref]           return $persName/forename || &#34; &#34; || $persName/surname      case element (personGrp) return $parameters?roles[@xml:id = $item/@ref]/@role/string()      case element (orgName) return $parameters?orgs[@xml:id = $item/@ref]/text()      default return () return    string-join($items, ', ')"/>
                <param name="receiver" value="let $items := for $item in .//correspAction[@type = &#34;received&#34;]/*   return typeswitch($item)      case element(persName)         return           let $persName := $parameters?persons/persName[@xml:id = $item/@ref]           return $persName/forename || &#34; &#34; || $persName/surname      case element (personGrp) return $parameters?roles[@xml:id = $item/@ref]/@role/string()      case element (orgName) return $parameters?orgs[@xml:id = $item/@ref]/text()      default return () return    string-join($items, ', ')"/>
                <pb:set-param name="subview" value="heading"/>
                <param name="date" value="let $date := .//correspAction[@type = &#34;sent&#34;]/date return if(exists($date/@when)) then (format-date($date/@when, '[D1o] [MNn] [Y]', 'de', (), ())) else if (exists($date/@notBefore) and exists($date/@notAfter)) then (&#34;Zwischen &#34; || format-date($date/@notBefore, '[D1o] [MNn] [Y]', 'de', (), ()) || &#34; und &#34; || format-date($date/@notAfter, '[D1o] [MNn] [Y]', 'de', (), ()))  else if(exists($date/@notBefore)) then (&#34;Nach &#34; || format-date($date/@notBefore, '[D1o] [MNn] [Y]', 'de', (), ()) ) else if(exists($date/@notAfter)) then (&#34;Vor &#34; || format-date($date/@notAfter, '[D1o] [MNn] [Y]', 'de', (), ())) else (&#34;Unbekannt&#34;)"/>
                <param name="place" value="let $place-id := .//correspAction[@type = 'sent']/place/@source   let $place := doc('/db/apps/bullinger-data/data/index/places.xml')//place[@xml:id=$place-id]/settlement/text() return   if(string-length($place)&gt;0) then (', ' || $place) else ()"/>
                <pb:template xmlns="" xml:space="preserve"><h1><span>Von <span style="color:darkgoldenrod">[[sender]]</span> an <span style="color:darkgoldenrod;">[[receiver]]</span></span></h1>
<div>[[date]][[place]]</div></pb:template>
            </model>
            <model behaviour="section">
                <desc>Person Images</desc>
                <param name="pictures" value="$parameters?persons[graphic]"/>
                <pb:set-param name="subtype" value="'pictures'"/>
                <pb:template xmlns="" xml:space="preserve"><div>[[pictures]]</div></pb:template>
            </model>
            <model behaviour="section">
                <desc>Bullinger Metadata</desc>
                <param name="correspAction" value=".//correspAction"/>
                <param name="msDesc" value=".//msDesc"/>
                <param name="lang" value=".//langUsage/language"/>
                <param name="printed" value=".//listBibl"/>
                <param name="hbbw-no" value="$parameters?hbbw-no"/>
                <param name="hidden" value="let $hbbw := $parameters?hbbw-no return if(string-length($hbbw) &gt; 0) then () else ('display:none;')"/>
                <pb:template xmlns="" xml:space="preserve"><h2>Metadata</h2>
<div id="sourceDesc">
  [[correspAction]]
  [[msDesc]]
  [[lang]]
  [[printed]]
  <div style="[[hidden]]">
    <div>HBBW-Briefnummer</div>
    <div>[[hbbw-no]]</div>
  </div>
</div></pb:template>
            </model>
            <model predicate="exists(.//msContents/summary/node())" behaviour="section" cssClass="regest">
                <desc>Regest</desc>
                <param name="content" value=".//msContents/summary"/>
                <pb:template xmlns="" xml:space="preserve"><h2>Regest</h2>
<div id="regest">[[content]]</div></pb:template>
            </model>
            <model predicate="exists(.//msContents//incipit/node())" behaviour="section" cssClass="incipit">
                <desc>Incipit</desc>
                <param name="content" value=".//msContents//incipit"/>
                <pb:template xmlns="" xml:space="preserve"><h2>Incipit</h2>
<div id="incipit">[[content]]</div></pb:template>
            </model>
        </modelSequence>
                    <model output="latex" behaviour="metadata"/>
                    <model output="fo" behaviour="omit"/>
                    <model output="web" predicate="$parameters?header='short'" behaviour="block"/>
                    <model output="web" behaviour="metadata"/>
                </elementSpec>
                <elementSpec ident="summary" mode="add">
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="TEI" mode="change">
                    <model predicate="$parameters?view='metadata'" behaviour="inline">
            <desc>Metadata Rendering (title, metadata, regest, incipit)</desc>
            <param name="content" value="./teiHeader"/>
            <pb:set-param name="hbbw-no" value="if(string-length(./@source/string())&gt; 0 and string-length(./@n/string()) &gt; 0) then ( string-join((./@source/string(), ./@n/string()),', ')) else (string-join((./@source/string(), ./@n/string())))"/>
            <pb:set-param name="persons" value="for $person in .//persName return   doc('/db/apps/bullinger-data/data/index/persons.xml')//person[persName/@xml:id = $person/@ref]"/>
            <pb:set-param name="orgs" value="for $org in .//orgName return   doc('/db/apps/bullinger-data/data/index/orgs.xml')//org[@xml:id = $org/@ref]"/>
            <pb:set-param name="roles" value="for $role in .//personGrp return   doc('/db/apps/bullinger-data/data/index/roles.xml')//personGrp[@xml:id = $role/@ref]"/>
            <pb:template xmlns="" xml:space="preserve"><div id="metaWrapper">
 [[content]]
</div></pb:template>
        </model>
                    <model behaviour="document"/>
                </elementSpec>
            <elementSpec ident="language" mode="add">
                    <model predicate="$parameters?view='metadata'" behaviour="block">
            <param name="content" value="text()"/>
            <pb:template xmlns="" xml:space="preserve"><div>Sprache</div>
<div>[[content]]</div></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="msIdentifier" mode="add"/>
                <elementSpec ident="correspAction" mode="add">
                    <modelSequence predicate="@type = &#34;sent&#34; and $parameters?view='metadata'">
            <model predicate="exists(date/note)" behaviour="block">
                <desc>Date with a Note</desc>
                <param name="content" value="if(exists(./date/@when)) then (format-date(./date/@when, '[D1o] [MNn] [Y]', 'de', (), ())) else if (exists(./date/@notBefore) and exists(./date/@notAfter)) then (&#34;Zwischen &#34; || format-date(./date/@notBefore, '[D1o] [MNn] [Y]', 'de', (), ()) || &#34; und &#34; || format-date(./date/@notAfter, '[D1o] [MNn] [Y]', 'de', (), ()))  else if(exists(./date/@notBefore)) then (&#34;Nach &#34; || format-date(./date/@notBefore, '[D1o] [MNn] [Y]', 'de', (), ()) ) else if(exists(./date/@notAfter)) then (&#34;Vor &#34; || format-date(./date/@notAfter, '[D1o] [MNn] [Y]', 'de', (), ())) else (&#34;Unbekannt&#34;)"/>
                <param name="note" value="./date/note/text()"/>
                <pb:template xmlns="" xml:space="preserve"><div>Date</div>
<div><pb-popover>
    <span slot="default">[[content]]</span>
    <span slot="alternate">[[note]]</span>
  </pb-popover></div>
</pb:template>
            </model>
            <model predicate="not(exists(date/note))" behaviour="block">
                <desc>Date without Note</desc>
                <param name="content" value="if(exists(./date/@when)) then (format-date(./date/@when, '[D1o] [MNn] [Y]', 'de', (), ())) else if (exists(./date/@notBefore) and exists(./date/@notAfter)) then (&#34;Zwischen &#34; || format-date(./date/@notBefore, '[D1o] [MNn] [Y]', 'de', (), ()) || &#34; und &#34; || format-date(./date/@notAfter, '[D1o] [MNn] [Y]', 'de', (), ()))  else if(exists(./date/@notBefore)) then (&#34;Nach &#34; || format-date(./date/@notBefore, '[D1o] [MNn] [Y]', 'de', (), ()) ) else if(exists(./date/@notAfter)) then (&#34;Vor &#34; || format-date(./date/@notAfter, '[D1o] [MNn] [Y]', 'de', (), ())) else (&#34;Unbekannt&#34;)"/>
                <pb:template xmlns="" xml:space="preserve"><div>Date</div>
<div>[[content]]</div>
</pb:template>
            </model>
            <model behaviour="block">
                <desc>Sender</desc>
                <param name="content" value="*[local-name() != 'date']"/>
                <pb:set-param name="place" value="let $place-id := ./place/@source  return doc('/db/apps/bullinger-data/data/index/places.xml')//place[@xml:id=$place-id]/settlement/text()"/>
                <pb:template xmlns="" xml:space="preserve"><div>Absender</div>
<div>[[content]]</div></pb:template>
            </model>
        </modelSequence>
                    <model predicate="@type = &#34;received&#34; and $parameters?view='metadata'" behaviour="block">
            <param name="content" value="*[local-name() != 'date']"/>
            <pb:set-param name="place" value="let $place-id := ./place/@source  return doc('/db/apps/bullinger-data/data/index/places.xml')//place[@xml:id=$place-id]/settlement/text()"/>
            <pb:template xmlns="" xml:space="preserve"><div>Empfänger</div>
<div>[[content]]</div></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="bibl" mode="change">
                    <model predicate="$parameters?view='metadata' and not(@type='Gedruckt')" behaviour="omit">
            <desc>don't display bibl items with type != "Gedruckt"</desc>
        </model>
                    <model predicate="$parameters?view='metadata' and @type='Gedruckt' and @subtype='Erwähnung'" behaviour="listItem">
            <param name="content" value="./title/text()"/>
            <pb:template xmlns="" xml:space="preserve">Erwähnung: [[content]]</pb:template>
        </model>
                    <model predicate="$parameters?view='metadata' and @type='Gedruckt' and not(@subtype)" behaviour="listItem"/>
                    <model predicate="parent::listBibl" behaviour="listItem"/>
                </elementSpec>
                <elementSpec ident="repository" mode="add">
                    <model predicate="$parameters?view='metadata' and exists($parameters?archive/idno[@subtype='url'])" behaviour="inline">
            <param name="uri" value="$parameters?archive/idno[@subtype=&#34;url&#34;]/text()"/>
            <param name="label" value="$parameters?archive/orgName/text()"/>
            <pb:template xmlns="" xml:space="preserve"><a href="[[uri]]" target="_blank">[[label]]</a></pb:template>
        </model>
                    <model predicate="$parameters?view='metadata'" behaviour="inline">
            <param name="label" value="$parameters?archive/orgName/text()"/>
            <pb:template xmlns="" xml:space="preserve">[[label]]</pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="titleStmt" mode="change">
                    <model output="latex" behaviour="meta">
            <param name="content" value="."/>
        </model>
                    <model output="fo" behaviour="heading"/>
                    <model predicate="$parameters?mode='title'" behaviour="heading">
            <param name="content" value="title[not(@type)]"/>
            <param name="level" value="5"/>
        </model>
                    <modelSequence output="web" predicate="$parameters?header='short'">
            <model behaviour="link">
                <param name="content" value="title[1]"/>
                <param name="uri" value="$parameters?doc"/>
            </model>
            <model behaviour="block">
                <param name="content" value="subsequence(title, 2)"/>
            </model>
            <model behaviour="block">
                <param name="content" value="author"/>
            </model>
        </modelSequence>
                    <model output="web" behaviour="block"/>
                </elementSpec>
                <elementSpec ident="persName" mode="add">
                    <model predicate="$parameters?view='metadata'" behaviour="block">
            <param name="name" value="let $ref := ./@ref  let $persName := $parameters?persons/persName[@xml:id = $ref] return   $persName/forename || &#34; &#34; || $persName/surname"/>
            <param name="place" value="if($parameters?place) then (&#34;, &#34; || $parameters?place ) else ()"/>
            <pb:template xmlns="" xml:space="preserve">[[name]][[place]]
</pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="orgName" mode="add">
                    <model predicate="$parameters?view='metadata'" behaviour="block">
            <param name="org" value="let $ref := @ref return $parameters?orgs[@xml:id = $ref]/text()"/>
            <param name="place" value="if($parameters?place) then (&#34;, &#34; || $parameters?place ) else ()"/>
            <pb:template xmlns="" xml:space="preserve">[[org]][[place]]</pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="personGrp" mode="add">
                    <model predicate="$parameters?view='metadata'" behaviour="block">
            <param name="group" value="let $ref := @ref return $parameters?roles[@xml:id = $ref]/@role/string()"/>
            <param name="place" value="if($parameters?place) then (&#34;, &#34; || $parameters?place ) else ()"/>
            <pb:template xmlns="" xml:space="preserve">[[group]][[place]]</pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="listBibl" mode="change">
                    <model predicate="$parameters?view='metadata'" behaviour="block">
            <param name="bibl" value="bibl"/>
            <pb:template xmlns="" xml:space="preserve"><div>Gedruckt</div>
<div><ul>[[bibl]]</ul></div></pb:template>
        </model>
                    <model predicate="bibl" behaviour="list">
            <param name="content" value="bibl"/>
        </model>
                </elementSpec>
                <elementSpec ident="msDesc" mode="add">
                    <modelSequence predicate="$parameters?view='metadata'">
            <model predicate="@subtype='Autograph'" behaviour="block">
                <param name="repository" value=".//repository"/>
                <param name="idno" value="if(msIdentifier/idno/@subtype='Autograph') then (', ' || ./msIdentifier/idno[@subtype='Autograph']/text()) else ()"/>
                <pb:set-param name="archive" value="let $archive-id := ./msIdentifier/repository/@ref return doc('/db/apps/bullinger-data/data/index/archives.xml')//org[@xml:id=$archive-id]"/>
                <pb:template xmlns="" xml:space="preserve"><div>Autograph</div>
<div>[[repository]][[idno]]</div></pb:template>
            </model>
            <model predicate="@subtype='Kopie'" behaviour="block">
                <param name="repository" value=".//repository"/>
                <param name="idno" value="if(./msIdentifier/idno/@subtype='Kopie') then (', ' || ./msIdentifier/idno[@subtype='Kopie']/text()) else ()"/>
                <param name="note" value="./msIdentifier/idno[@subtype='Hinweis']/text()"/>
                <pb:set-param name="archive" value="let $archive-id := ./msIdentifier/repository/@ref return doc('/db/apps/bullinger-data/data/index/archives.xml')//org[@xml:id=$archive-id]"/>
                <pb:template xmlns="" xml:space="preserve"><div>Kopie</div>
<div>[[repository]]<pb-popover>
    <span slot="default">[[idno]]</span>
    <span slot="alternate">[[note]]</span>
  </pb-popover>
</div></pb:template>
            </model>
        </modelSequence>
                </elementSpec>
            <elementSpec ident="text" mode="change">
                    <model predicate="not(exists(.//div))" behaviour="inline">
            <pb:template xmlns="" xml:space="preserve"><div>Für diesen Brief ist keine Transkription verfügbar.</div></pb:template>
        </model>
                    <model behaviour="body"/>
                </elementSpec>
            <elementSpec ident="person" mode="add">
                    <model predicate="$parameters?subtype = 'pictures'" behaviour="graphic" cssClass="portrait">
            <param name="url" value="'../bullinger-data/data/portraits-100-q60/' || ./graphic/@url/string()"/>
            <param name="title" value="./persName[@type='main']/forename || &#34; &#34; || ./persName[@type='main']/surname"/>
        </model>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>