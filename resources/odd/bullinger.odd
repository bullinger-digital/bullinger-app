<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Bullinger ODD</title>
                <title type="short">Bullinger ODD</title>
            </titleStmt>
            <publicationStmt>
                <publisher>JinnTec GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Default customization generated by <ref target="http://tei-publisher.com">TEI
                        Publisher</ref>, extending tei_simplePrint.odd.</p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="bullinger.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2017-09-08">adjust metadata in teiHeader</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="bullinger" source="teipublisher.odd">
               
            <elementSpec ident="graphic" mode="change">
                    <model predicate="$parameters?view = &#34;facsimile&#34;" behaviour="inline">
            <param name="facs" value="let $url := if(contains(@url, &#34;Autograph&#34;))              then ( replace(@url, '(.*Autograph.\d\d)__(.*)' , '$1 $2') )             else if(contains(@url, &#34;Kopie&#34;))              then (replace(@url, '(.*Kopie.\d\d)__(.*)' , '$1 $2'))             else (replace(@url, '(.*Original.\d\d)__(.*)' , '$1 $2'))              return   encode-for-uri($url)"/>
            <param name="label" value="@n"/>
            <param name="id" value="@xml:id"/>
            <pb:template xmlns="" xml:space="preserve"><pb-facs-link id="[[id]]" emit="transcription" facs="[[facs]]"/></pb:template>
        </model>
                    <model behaviour="graphic">
            <param name="url" value="@url"/>
            <param name="width" value="@width"/>
            <param name="height" value="@height"/>
            <param name="scale" value="@scale"/>
            <param name="title" value="desc"/>
        </model>
                </elementSpec>
            <elementSpec ident="teiHeader" mode="change">
                    <modelSequence predicate="$parameters?view='metadata'">
            <desc>TEI Header Data for Bullinger Letters</desc>
            <model behaviour="section" pb:mode="header">
                <desc>TEI Title</desc>
                <param name="level" value="1"/>
                <param name="sender" value="let $items := for $item in .//correspAction[@type = &#34;sent&#34;]/(persName,orgName,roleName)      return typeswitch ($item) case element(persName) return let $persName := $parameters?persons/persName[@xml:id = $item/@ref] return $persName/forename || &#34; &#34; || $persName/surname case element(orgName) return $parameters?orgs[@xml:id = $item/@ref]/name[@xml:lang='de'][@type=$item/@type] case element(roleName) return $parameters?roles[@xml:id = $item/@ref]/form[@xml:lang=&#34;de&#34;][@type=$item/@type]             default                 return () return string-join($items, ', ')"/>
                <param name="receiver" value="let $items :=     for $item in .//correspAction[@type = &#34;received&#34;]/*     return         typeswitch ($item)             case element(persName)                 return                     let $persName := $parameters?persons/persName[@xml:id = $item/@ref]                     return $persName/forename || &#34; &#34; || $persName/surname             case element(orgName)                 return $parameters?orgs[@xml:id = $item/@ref]             case element(roleName)                 return $parameters?roles[@xml:id = $item/@ref]/form[@xml:lang=&#34;de&#34;][@type=$item/@type]             default                 return () return string-join($items, ', ')"/>
                <param name="date" value="let $date := .//correspAction[@type = &#34;sent&#34;]/date return if(exists($date/@when)) then (format-date($date/@when, '[D1o] [MNn] [Y]', 'de', (), ())) else if (exists($date/@notBefore) and exists($date/@notAfter)) then (&#34;Zwischen &#34; || format-date($date/@notBefore, '[D1o] [MNn] [Y]', 'de', (), ()) || &#34; und &#34; || format-date($date/@notAfter, '[D1o] [MNn] [Y]', 'de', (), ()))  else if(exists($date/@notBefore)) then (&#34;Nach &#34; || format-date($date/@notBefore, '[D1o] [MNn] [Y]', 'de', (), ()) ) else if(exists($date/@notAfter)) then (&#34;Vor &#34; || format-date($date/@notAfter, '[D1o] [MNn] [Y]', 'de', (), ())) else (&#34;Unbekannt&#34;)"/>
                <param name="place" value="let $place-id := .//correspAction[@type = 'sent']/placeName/@source return $parameters?places[@xml:id=$place-id]"/>
                <param name="type" value="../@type/string()"/>
                <pb:template xmlns="" xml:space="preserve"><h1><span>Von <span style="color:var(--bb-beige);">[[sender]]</span> an <span style="color:var(--bb-beige);">[[receiver]]</span></span></h1>
<div class="subtitle"><iron-icon id="date-range" icon="date-range"/>[[date]] <iron-icon id="map-near-me" icon="maps:near-me"/>[[place]] <span class="doc-type">[[type]]</span></div></pb:template>
            </model>
            <model behaviour="section">
                <desc>Person Images</desc>
                <param name="pictures" value="$parameters?persons[idno/@subtype=&#34;portrait&#34;]"/>
                <pb:set-param name="subtype" value="'pictures'"/>
                <pb:template xmlns="" xml:space="preserve"><div>[[pictures]]</div></pb:template>
            </model>
            <model behaviour="section">
                <desc>Bullinger Metadata</desc>
                <param name="correspAction" value=".//correspAction"/>
                <param name="msDesc" value=".//msDesc"/>
                <param name="lang" value=".//langUsage/language"/>
                <param name="printed" value=".//listBibl"/>
                <param name="hbbw-no" value="$parameters?hbbw-no"/>
                <param name="hidden" value="let $hbbw := $parameters?hbbw-no return if(string-length($hbbw) &gt; 0) then () else ('display:none;')"/>
                <pb:set-param name="subtype" value="metadata"/>
                <pb:template xmlns="" xml:space="preserve"><h2>Metadata</h2>
<div id="sourceDesc">
  [[correspAction]]
  [[msDesc]]
  [[lang]]
  [[printed]]
  <div style="[[hidden]]">
    <div>HBBW-Briefnummer</div>
    <div>[[hbbw-no]]</div>
  </div>
</div></pb:template>
            </model>
            <model predicate="exists(.//msContents/summary/node())" behaviour="section" cssClass="regest">
                <desc>Regest</desc>
                <param name="content" value=".//msContents/summary"/>
                <param name="source" value=".//bibl[@type='transcription']"/>
                <param name="overlength" value="let $request := .//msContents/summary/p/text() let $text := string-join($request, &#34; &#34;) return   if(exists($request) and string-length($text) &lt; 300)    then ()   else (&#34;overlength&#34;)"/>
                <pb:template xmlns="" xml:space="preserve"><h2>Regest[[source]]</h2>
<div class="regesttext [[overlength]]">
  <div id="regest" class="metaregest">[[content]]</div>
  <div class="expander"><iron-icon icon="arrow-drop-down"/></div>
</div></pb:template>
            </model>
            <model predicate="exists(.//msContents//incipit/node())" behaviour="section" cssClass="incipit">
                <desc>Incipit</desc>
                <param name="content" value=".//msContents//incipit"/>
                <pb:template xmlns="" xml:space="preserve"><h2>Incipit</h2>
<div id="incipit">[[content]]</div></pb:template>
            </model>
        </modelSequence>
                    <model output="latex" behaviour="metadata"/>
                    <model output="fo" behaviour="omit"/>
                    <model output="web" predicate="$parameters?header='short'" behaviour="block"/>
                    <model output="web" predicate="exists(.//language)" behaviour="pass-through">
            <param name="content" value="sort(.//language, (), function ($lang as element(language)) { -number($lang/@usage) })"/>
            <pb:template xmlns="" xml:space="preserve"><div class="lang-usage">Farblegende: [[content]]</div></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="summary" mode="add">
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="TEI" mode="change">
                    <model predicate="$parameters?view='metadata'" behaviour="inline">
            <desc>Metadata Rendering (title, metadata, regest, incipit)</desc>
            <param name="content" value="teiHeader"/>
            <pb:set-param name="hbbw-no" value="if(string-length(./@source/string())&gt; 0 and string-length(./@n/string()) &gt; 0) then ( string-join((./@source/string(), &#34;Nr. &#34; || ./@n/string()),', ')) else (string-join((./@source/string(), ./@n/string())))"/>
            <pb:set-param name="persons" value="let $persons := doc('/db/apps/bullinger-data/data/index/persons.xml') return     for $person in .//teiHeader//persName[@ref]      group by $persref := $person/@ref     return         id($persref,$persons)/ancestor::person"/>
            <pb:set-param name="orgs" value="let $orgs := doc('/db/apps/bullinger-data/data/index/institutions.xml') return  for $org in .//teiHeader//orgName[@ref]  group by $orgref := $org/@ref return id($orgref,$orgs)"/>
            <pb:set-param name="roles" value="let $roles := doc('/db/apps/bullinger-data/data/index/groups.xml')  return  for $role in .//teiHeader//roleName[@ref] group by $roleref := $role/@ref return id($roleref,$roles)"/>
            <pb:set-param name="places" value="let $places := doc('/db/apps/bullinger-data/data/index/localities.xml')  return   for $place in .//teiHeader//placeName[@source or @ref] group by $placeref := ($place/@source, $place/@ref)[1]  return id($placeref,$places)"/>
            <pb:set-param name="archives" value="let $archives := doc('/db/apps/bullinger-data/data/index/archives.xml')  return   for $archive in .//teiHeader//repository[@ref] group by $archiveref := $archive/@ref  return id($archiveref,$archives)"/>
            <pb:template xmlns="" xml:space="preserve"><div id="metaWrapper">
 [[content]]
</div></pb:template>
        </model>
                    <model behaviour="document"/>
                </elementSpec>
            <elementSpec ident="language" mode="add">
                    <model predicate="$parameters?view='metadata'" behaviour="block">
            <param name="content" value="text()"/>
            <pb:template xmlns="" xml:space="preserve"><div>Sprache</div>
<div>[[content]]</div></pb:template>
        </model>
                    <model output="web" behaviour="pass-through">
            <desc>output specific language usage percentage </desc>
            <param name="id" value="@ident"/>
            <param name="percentage" value="@usage"/>
            <pb:template xmlns="" xml:space="preserve"><span class="lang-[[id]] lang__usage">[[content]]<span class="lang-usage-percent">[[percentage]]%</span></span></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="msIdentifier" mode="add"/>
                <elementSpec ident="correspAction" mode="add">
                    <modelSequence predicate="@type = &#34;sent&#34; and $parameters?view='metadata'">
            <model predicate="exists(date/note)" behaviour="block">
                <desc>Date with a Note</desc>
                <param name="content" value="if(exists(./date/@when)) then (format-date(./date/@when, '[D1o] [MNn] [Y]', 'de', (), ())) else if (exists(./date/@notBefore) and exists(./date/@notAfter)) then (&#34;Zwischen &#34; || format-date(./date/@notBefore, '[D1o] [MNn] [Y]', 'de', (), ()) || &#34; und &#34; || format-date(./date/@notAfter, '[D1o] [MNn] [Y]', 'de', (), ()))  else if(exists(./date/@notBefore)) then (&#34;Nach &#34; || format-date(./date/@notBefore, '[D1o] [MNn] [Y]', 'de', (), ()) ) else if(exists(./date/@notAfter)) then (&#34;Vor &#34; || format-date(./date/@notAfter, '[D1o] [MNn] [Y]', 'de', (), ())) else (&#34;Unbekannt&#34;)"/>
                <param name="note" value="./date/note/text()"/>
                <pb:template xmlns="" xml:space="preserve"><div>Date</div>
<div><pb-popover>
    <span slot="default">[[content]]</span>
    <span slot="alternate">[[note]]</span>
  </pb-popover></div>
</pb:template>
            </model>
            <model predicate="not(exists(date/note))" behaviour="block">
                <desc>Date without Note</desc>
                <param name="content" value="if(exists(./date/@when)) then (format-date(./date/@when, '[D1o] [MNn] [Y]', 'de', (), ())) else if (exists(./date/@notBefore) and exists(./date/@notAfter)) then (&#34;Zwischen &#34; || format-date(./date/@notBefore, '[D1o] [MNn] [Y]', 'de', (), ()) || &#34; und &#34; || format-date(./date/@notAfter, '[D1o] [MNn] [Y]', 'de', (), ()))  else if(exists(./date/@notBefore)) then (&#34;Nach &#34; || format-date(./date/@notBefore, '[D1o] [MNn] [Y]', 'de', (), ()) ) else if(exists(./date/@notAfter)) then (&#34;Vor &#34; || format-date(./date/@notAfter, '[D1o] [MNn] [Y]', 'de', (), ())) else (&#34;Unbekannt&#34;)"/>
                <pb:template xmlns="" xml:space="preserve"><div>Date</div>
<div>[[content]]</div>
</pb:template>
            </model>
            <model behaviour="block" pb:mode="metadata">
                <desc>Sender</desc>
                <param name="sender" value="(persName,orgName,roleName)"/>
                <pb:template xmlns="" xml:space="preserve"><div>Absender</div>
<div>[[sender]]</div></pb:template>
            </model>
        </modelSequence>
                    <model predicate="@type = &#34;received&#34; and $parameters?view='metadata'" behaviour="block">
            <param name="receiver" value="(persName,orgName,roleName)"/>
            <pb:template xmlns="" xml:space="preserve"><div>Empfänger</div>
<div>[[receiver]]</div></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="bibl" mode="change">
                    <model output="web" predicate="$parameters?view='metadata' and @type='transcription'" behaviour="pass-through">
            <desc>info popover next to regest</desc>
            <pb:template xmlns="" xml:space="preserve"><pb-popover class="source-info">
  <iron-icon slot="default" icon="info" class="source-info--icon"/>
  <span slot="alternate">Quelle: [[content]]</span>
</pb-popover></pb:template>
        </model>
                    <model predicate="$parameters?view='metadata' and @type='Gedruckt' and @subtype='Erwähnung'" behaviour="listItem">
            <param name="content" value="./title/text()"/>
            <pb:template xmlns="" xml:space="preserve">Erwähnung: [[content]]</pb:template>
        </model>
                    <model predicate="$parameters?view='metadata' and @type='Gedruckt' and not(@subtype)" behaviour="listItem"/>
                    <model predicate="parent::listBibl" behaviour="listItem"/>
                </elementSpec>
                <elementSpec ident="repository" mode="add">
                    <model predicate="$parameters?view='metadata' and exists($parameters?archive/idno[@subtype='url'])" behaviour="inline">
            <param name="uri" value="$parameters?archive/idno[@subtype=&#34;url&#34;]/text()"/>
            <param name="label" value="$parameters?archive/orgName/text()"/>
            <pb:template xmlns="" xml:space="preserve"><a href="[[uri]]" target="_blank">[[label]]</a></pb:template>
        </model>
                    <model predicate="$parameters?view='metadata'" behaviour="inline">
            <param name="label" value="$parameters?archive/orgName/text()"/>
            <pb:template xmlns="" xml:space="preserve">[[label]]</pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="titleStmt" mode="change">
                    <model output="latex" behaviour="meta">
            <param name="content" value="."/>
        </model>
                    <model output="fo" behaviour="heading"/>
                    <model predicate="$parameters?mode='title'" behaviour="heading">
            <param name="content" value="title[not(@type)]"/>
            <param name="level" value="5"/>
        </model>
                    <modelSequence output="web" predicate="$parameters?header='short'">
            <model behaviour="link">
                <param name="content" value="title[1]"/>
                <param name="uri" value="$parameters?doc"/>
            </model>
            <model behaviour="block">
                <param name="content" value="subsequence(title, 2)"/>
            </model>
            <model behaviour="block">
                <param name="content" value="author"/>
            </model>
        </modelSequence>
                    <model output="web" behaviour="block"/>
                </elementSpec>
                <elementSpec ident="persName" mode="add">
                    <model predicate="$parameters?view='metadata' and exists(ancestor::correspAction)" behaviour="block">
            <param name="name" value="let $ref := ./@ref  let $persName := $parameters?persons/persName[@xml:id = $ref] return   $persName/forename/text() || &#34; &#34; || $persName/surname/text()"/>
            <param name="place" value="let $placeref := ../placeName/@source  return if($parameters?places[@xml:id=$placeref])  then ( (&#34;, &#34;, $parameters?places[@xml:id=$placeref]) ) else ()"/>
            <pb:template xmlns="" xml:space="preserve">[[name]][[place]]</pb:template>
        </model>
                    <model predicate="@ref" behaviour="inline" cssClass="person">
            <desc>persName in TEI Text</desc>
            <param name="content" value="./text()"/>
            <param name="label" value="let $ref := ./@ref    let $persParam := $parameters?persons/persName[@xml:id = $ref]  let $name := $persParam/forename/text() || &#34; &#34; || $persParam/surname/text() return   &lt;a href=&#34;./persons/{$ref}&#34;&gt;{$name}&lt;/a&gt;"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover>
  <span slot="default">[[content]]</span>
  <span slot="alternate">[[label]]</span>
</pb-popover></pb:template>
        </model>
                    <model behaviour="inline" cssClass="person"/>
                </elementSpec>
                <elementSpec ident="orgName" mode="add">
                    <model predicate="$parameters?view='metadata' and exists(ancestor::correspAction)" behaviour="block">
            <param name="org" value="let $ref := @ref  let $type := @type return $parameters?orgs[@xml:id = $ref]/name[@xml:lang='de'][@type=$type]/text()"/>
            <param name="place" value="let $placeref := ../placeName/@source  return if($parameters?places[@xml:id=$placeref])  then ( (&#34;, &#34;, $parameters?places[@xml:id=$placeref]) ) else ()"/>
            <pb:template xmlns="" xml:space="preserve">[[org]][[place]]</pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="personGrp" mode="add"/>
                <elementSpec ident="listBibl" mode="change">
                    <model predicate="$parameters?view='metadata'" behaviour="block">
            <param name="bibl" value="bibl"/>
            <pb:template xmlns="" xml:space="preserve"><div>Gedruckt</div>
<div><ul>[[bibl]]</ul></div></pb:template>
        </model>
                    <model predicate="bibl" behaviour="list">
            <param name="content" value="bibl"/>
        </model>
                </elementSpec>
                <elementSpec ident="msDesc" mode="add">
                    <modelSequence predicate="$parameters?view='metadata'">
            <model predicate="@subtype='Autograph'" behaviour="block">
                <param name="repository" value=".//repository"/>
                <param name="idno" value="if(msIdentifier/idno/@subtype='Autograph') then (', ' || ./msIdentifier/idno[@subtype='Autograph']/text()) else ()"/>
                <pb:set-param name="archive" value="let $archive-id := ./msIdentifier/repository/@ref return doc('/db/apps/bullinger-data/data/index/archives.xml')//org[@xml:id=$archive-id]"/>
                <pb:template xmlns="" xml:space="preserve"><div>Autograph</div>
<div>[[repository]][[idno]]</div></pb:template>
            </model>
            <model predicate="@subtype='Kopie' and not(exists(./msIdentifier/idno[@subtype='Hinweis']))" behaviour="block">
                <param name="repository" value=".//repository"/>
                <param name="idno" value="if(./msIdentifier/idno/@subtype='Kopie') then (', ' || ./msIdentifier/idno[@subtype='Kopie']/text()) else ()"/>
                <pb:set-param name="archive" value="let $archives := doc('/db/apps/bullinger-data/data/index/archives.xml') let $archive-id := ./msIdentifier/repository/@ref  return id($archive-id,$archives)"/>
                <pb:template xmlns="" xml:space="preserve"><div>Kopie</div>
<div>[[repository]][[idno]]</div></pb:template>
            </model>
            <model predicate="@subtype='Kopie' and exists(./msIdentifier/idno[@subtype='Hinweis'])" behaviour="block">
                <param name="repository" value=".//repository"/>
                <param name="idno" value="if(./msIdentifier/idno/@subtype='Kopie') then (', ' || ./msIdentifier/idno[@subtype='Kopie']/text()) else ()"/>
                <param name="note" value="./msIdentifier/idno[@subtype='Hinweis']/text()"/>
                <pb:set-param name="archive" value="let $archives := doc('/db/apps/bullinger-data/data/index/archives.xml') let $archive-id := ./msIdentifier/repository/@ref  return id($archive-id,$archives)"/>
                <pb:template xmlns="" xml:space="preserve"><div>Kopie</div>
<div>[[repository]]<pb-popover>
    <span slot="default">[[idno]]</span>
    <span slot="alternate">[[note]]</span>
  </pb-popover>
</div></pb:template>
            </model>
        </modelSequence>
                </elementSpec>
            <elementSpec ident="text" mode="change">
                    <model predicate="not(exists(.//div))" behaviour="inline">
            <pb:template xmlns="" xml:space="preserve"><div>Für diesen Brief ist keine Transkription verfügbar.</div></pb:template>
        </model>
                    <model behaviour="body">
            <pb:set-param name="persons" value="let $persons := doc('/db/apps/bullinger-data/data/index/persons.xml') return     for $person in .//persName[@ref]      group by $persref := $person/@ref     return       id($persref,$persons)/ancestor::person"/>
            <pb:set-param name="places" value="let $places := doc('/db/apps/bullinger-data/data/index/localities.xml') return   for $place in .//placeName[@ref]   group by $placeref := $place/@ref  return id($placeref,$places)"/>
        </model>
                </elementSpec>
            <elementSpec ident="person" mode="add">
                    <model predicate="$parameters?subtype = 'pictures'" behaviour="graphic" cssClass="portrait">
            <param name="url" value="'../bullinger-data/data/portraits/' || ./idno[@subtype='portrait']/text()"/>
            <param name="title" value="./persName[@type='main']/forename || &#34; &#34; || ./persName[@type='main']/surname"/>
            <pb:template xmlns="" xml:space="preserve"><img src="[[url]]" alt="[[title]]"/></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="placeName" mode="add">
                    <model predicate="@source and $parameters?view='metadata'" behaviour="pass-through">
            <param name="placename" value="let $source := @source return $parameters?places[@xml:id=$source]"/>
            <pb:template xmlns="" xml:space="preserve">[[placename]]</pb:template>
        </model>
                    <model predicate="@ref" behaviour="inline" cssClass="place">
            <desc>placeName in TEI Text</desc>
            <param name="content" value="./text()"/>
            <param name="label" value="let $ref := ./@ref let $place := $parameters?places[@xml:id = $ref] return   &lt;a href=&#34;./localities/{$ref}&#34;&gt;{$place}&lt;/a&gt;"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover>
  <span slot="default">[[content]]</span>
  <span slot="alternate">Test [[label]]</span>
</pb-popover></pb:template>
        </model>
                    <model behaviour="inline" cssClass="place"/>
                </elementSpec>
                <elementSpec ident="body" mode="change"/>
            <elementSpec ident="place" mode="add">
                    <model behaviour="pass-through">
            <param name="place" value="if(./settlement)  then (./settlement/text())  else if(./district)  then (./district/text()) else (./country/text())"/>
            <pb:template xmlns="" xml:space="preserve">[[place]]</pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="roleName" mode="add">
                    <model predicate="$parameters?view='metadata' and exists(ancestor::correspAction)" behaviour="block">
            <param name="name" value="let $ref := @ref let $type := @type return $parameters?roles[@xml:id=$ref]/form[@xml:lang='de'][@type=$type]/text()"/>
            <param name="send-from" value="let $placeref := ../placeName/@source  return if($parameters?places[@xml:id=$placeref])  then ( (&#34;, &#34;, $parameters?places[@xml:id=$placeref]) ) else ()"/>
            <param name="place" value="let $placeref := .//placeName/@ref  return if($parameters?places[@xml:id=$placeref])  then ( (&#34; &#34;, $parameters?places[@xml:id=$placeref]) ) else ()"/>
            <param name="org" value="let $orgref := .//orgName/@ref  let $type := .//orgName/@type   return    if($parameters?orgs[@xml:id=$orgref])     then (      (&#34; &#34;, $parameters?orgs[@xml:id = $orgref]/name[@xml:lang='de'][@type=$type]/text())    ) else ()"/>
            <pb:template xmlns="" xml:space="preserve">[[name]][[place]][[org]]</pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="s" mode="change">
                    <model output="web" behaviour="pass-through">
            <desc>Render language specific s as spans in paragraphs</desc>
            <param name="language" value="@xml:lang/string()"/>
            <pb:template xmlns="" xml:space="preserve"><span class="lang-[[language]]">[[content]]</span></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="foreign" mode="change">
                    <model output="web" behaviour="pass-through">
            <desc>Render language specific foreign as spans in paragraphs</desc>
            <param name="language" value="@xml:lang/string()"/>
            <pb:template xmlns="" xml:space="preserve"><span class="lang-[[language]]">[[content]]</span></pb:template>
        </model>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>