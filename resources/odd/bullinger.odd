<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0"
    xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Bullinger ODD</title>
                <title type="short">Bullinger ODD</title>
            </titleStmt>
            <publicationStmt>
                <publisher>JinnTec GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Default customization generated by <ref target="http://tei-publisher.com">TEI
                        Publisher</ref>, extending tei_simplePrint.odd.</p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="bullinger.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2017-09-08">adjust metadata in teiHeader</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="bullinger" source="teipublisher.odd">
                <elementSpec ident="TEI" mode="change">
                    <model predicate="$parameters?view='metadata'" behaviour="inline">
                        <desc>Metadata Rendering (title, metadata, regest, incipit)</desc>
                        <param name="header" value="ext:get-header(.//teiHeader, $parameters?language)"/>
                        <param name="metadata" value="ext:metadata-by-letter(.//teiHeader, $parameters?language)"/>
                        <param name="regest" value="./teiHeader"/>
                        <pb:set-param name="persons" value="let $persons := doc('/db/apps/bullinger-data/data/index/persons.xml') return     for $person in .//teiHeader//persName[@ref]      group by $persref := upper-case($person/@ref)     return         id($persref,$persons)"/>
                        <pb:set-param name="places" value="let $places := doc('/db/apps/bullinger-data/data/index/localities.xml')  return   for $place in .//teiHeader//placeName[@ref] group by $placeref := $place/@ref  return id($placeref,$places)"/>
                        <pb:set-param name="bibliography" value="doc('/db/apps/bullinger-data/data/index/bibliography.xml')"/>
                        <pb:template xmlns="" xml:space="preserve">
                            <div style="background: white; margin-bottom: 20px; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
                                [[header]]
                                <div id="metaWrapper" class="center-l">
                                    <div>
                                        [[metadata]]
                                    </div>
                                    <div>
                                        [[regest]]
                                    </div>
                                </div>
                            </div>
                        </pb:template>
                    </model>
                    <model behaviour="document"/>
                </elementSpec>
                <elementSpec ident="zone" mode="change">
                    <model behaviour="omit"/>
                </elementSpec>
                <elementSpec ident="graphic" mode="change"/>
                <elementSpec ident="teiHeader" mode="change">
                    <modelSequence predicate="$parameters?view='metadata'">
                        <desc>TEI Header Data for Bullinger Letters</desc>
                        <model behaviour="section" pb:mode="header">
                            <desc>TEI Title</desc>
                            <param name="level" value="1"/>
                        </model>
                        <model predicate="exists(.//msContents/summary/node())" behaviour="section" cssClass="regest">
                            <desc>Regest</desc>
                            <param name="content" value=".//msContents/summary"/>
                            <param name="source" value=".//bibl[@type='regest']"/>
                            <param name="overlength" value="let $request := .//msContents/summary/p/text() let $text := string-join($request, &#34; &#34;) return   if(exists($request) and string-length($text) &lt; 300)    then ()   else (&#34;overlength&#34;)"/>
                            <pb:template xmlns="" xml:space="preserve">
                                <h2 class="section-title">
                                    <pb-i18n key="regest">(Regest)</pb-i18n>&#160;[[source]]</h2>
                                <div class="regesttext [[overlength]]">
                                    <div id="regest" class="metaregest">[[content]]</div>
                                    <div class="expander">
                                        <iron-icon icon="arrow-drop-down"/>
                                    </div>
                                </div>
                            </pb:template>
                        </model>
                    </modelSequence>
                    <model output="latex" behaviour="metadata"/>
                    <model output="fo" behaviour="omit"/>
                    <model output="web" predicate="$parameters?header='short'" behaviour="block"/>
                    <model output="web" predicate="exists(.//language)" behaviour="pass-through">
                        <param name="color-info" value="sort(.//language, (), function ($lang as element(language)) { -number($lang/@usage) })"/>
                        <pb:template xmlns="" xml:space="preserve">
                            <div class="lang-usage">
                                <pb-i18n key="color-legend">(Farblegende)</pb-i18n>: [[color-info]]</div>
                        </pb:template>
                    </model>
                </elementSpec>
                <elementSpec ident="summary" mode="add">
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="language" mode="add">
                    <model output="web" behaviour="pass-through">
                        <desc>output specific language usage percentage </desc>
                        <param name="ident" value="@ident"/>
                        <param name="percentage" value="let $usage := xs:integer(@usage) return if ($usage = 0 ) then ( $usage ) else ( $usage div 10 )"/>
                        <pb:template xmlns="" xml:space="preserve">
                            <span class="lang-[[ident]] lang__usage">
                                <pb-i18n key="metadata.language.[[ident]]">(ident)</pb-i18n>
                                <span class="lang-usage-percent">[[percentage]]%</span>
                            </span>
                        </pb:template>
                    </model>
                </elementSpec>
                <elementSpec ident="titleStmt" mode="change">
                    <model output="latex" behaviour="meta">
                        <param name="content" value="."/>
                    </model>
                    <model output="fo" behaviour="heading"/>
                    <model predicate="$parameters?mode='title'" behaviour="heading">
                        <param name="content" value="title[not(@type)]"/>
                        <param name="level" value="5"/>
                    </model>
                    <modelSequence output="web" predicate="$parameters?header='short'">
                        <model behaviour="link" pb:mode="header">
                            <desc>Title in search results</desc>
                            <param name="uri" value="$parameters?doc || '?highlight=yes'"/>
                            <param name="level" value="1"/>
                            <param name="sender" value="ext:correspondents-by-letter(ancestor::teiHeader, 'sent')"/>
                            <param name="receiver" value="ext:correspondents-by-letter(ancestor::teiHeader, 'received')"/>
                            <param name="date" value="ext:date-by-letter(ancestor::teiHeader, $parameters?language)"/>
                            <param name="place" value="ext:place-by-letter(ancestor::teiHeader)"/>
                            <param name="type" value="ancestor::TEI/@type/string()"/>
                            <param name="has-facsimile" value="if (exists(ancestor::TEI//facsimile//graphic)) then ('display: block;') else ('display: none;')"/>
                            <param name="first-facsimile" value="let $path := ancestor::TEI//facsimile//graphic/desc[@subtype='path'][1]  return if(exists($path)) then ('https://media.sources-online.org/cantaloupe/iiif/3/bullinger!' || fn:encode-for-uri(replace($path/text(), '/', '!')) || '/full/100,/0/default.jpg') else ('')"/>
                            <pb:template xmlns="" xml:space="preserve">
                                <div class="search-result">
                                    <div>
                                        <div class="search-result-title">
                                            <span style="color:var(--bb-beige);">[[sender]]</span>&#8199;<pb-i18n key="_to_">(an)</pb-i18n>&#8199;<span style="color:var(--bb-beige);">[[receiver]]</span>
                                        </div>
                                        <div class="search-result-subtitle">
                                            <span class="doc-type">
                                                <pb-i18n key="metadata.types.[[type]]">_[[type]]_</pb-i18n>
                                            </span>
                                            [[date]], <span>[[place]]</span>
                                        </div>
                                    </div>
                                    <div style="[[has-facsimile]]" class="search-result-facsimile">
                                        <div>
                                            <img src="[[first-facsimile]]" style="[[has-facsimile]]"/>
                                        </div>
                                    </div>
                                </div>
                            </pb:template>
                        </model>
                        <model behaviour="block">
                            <param name="content" value="subsequence(title, 2)"/>
                        </model>
                        <model behaviour="block">
                            <param name="content" value="author"/>
                        </model>
                    </modelSequence>
                    <model output="web" behaviour="block"/>
                </elementSpec>
                <elementSpec ident="persName" mode="add">
                    <model predicate="@ref" behaviour="inline" cssClass="person">
                        <desc>persName in TEI Text</desc>
                        <param name="pers-id" value="fn:upper-case(./@ref)"/>
                        <param name="label" value="let $ref := ./@ref let $persParam := $parameters?persons[@xml:id = upper-case($ref)]/persName[@type='main']  return $persParam/forename/text() || &#34; &#34; || $persParam/surname/text()"/>
                        <pb:template xmlns="" xml:space="preserve">
                            <pb-popover>
                                <span slot="default">
                                    <span class="ne-with-ref">[[content]]</span>
                                </span>
                                <span slot="alternate">
                                    <a href="./persons/[[pers-id]]">[[label]]</a>
                                </span>
                            </pb-popover>
                        </pb:template>
                    </model>
                    <model behaviour="inline" cssClass="person"/>
                </elementSpec>
                <elementSpec ident="text" mode="change">
                    <model predicate="not(exists(.//div))" behaviour="inline">
                        <pb:template xmlns="" xml:space="preserve">
                            <div>Für diesen Brief ist keine Transkription verfügbar.</div>
                        </pb:template>
                    </model>
                    <model behaviour="body">
                        <pb:set-param name="persons" value="let $persons := doc('/db/apps/bullinger-data/data/index/persons.xml') return     for $person in .//persName[@ref]      group by $persref := upper-case($person/@ref)     return       id($persref,$persons)"/>
                        <pb:set-param name="places" value="let $places := doc('/db/apps/bullinger-data/data/index/localities.xml') return   for $place in .//placeName[@ref]   group by $placeref := $place/@ref  return id($placeref,$places)"/>
                        <param name="content" value="(./note[@type='footnote'], ancestor::TEI//summary//note[@type='footnote'], ./*[not(self::note)])" />
                    </model>
                </elementSpec>
                <elementSpec ident="bibl" mode="change">
                    <model output="web" predicate="$parameters?view='metadata' and @type='regest' and string-length(@source) > 0" behaviour="pass-through">
                        <desc>info popover next to regest</desc>
                        <param name="label" value="id(@source/string(), $parameters?bibliography)/bibl/text()"/>
                        <pb:template xmlns="" xml:space="preserve">
                            <pb-popover class="source-info">
                                <iron-icon slot="default" icon="info-outline" class="source-info--icon"/>
                                <span slot="alternate">
                                    <pb-i18n key="source">(Quelle)</pb-i18n>: [[label]]</span>
                            </pb-popover>
                        </pb:template>
                    </model>
                </elementSpec>
                <elementSpec ident="placeName" mode="add">
                    <model predicate="@ref" behaviour="inline" cssClass="place">
                        <desc>placeName in TEI Text</desc>
                        <param name="label" value="let $ref := ./@ref let $place := fn:string-join($parameters?places[@xml:id = $ref]/(settlement,district,country)/text(), ', ') return   &lt;a href=&#34;./localities/{$ref}&#34;&gt;{$place}&lt;/a&gt;"/>
                        <pb:template xmlns="" xml:space="preserve">
                            <pb-popover>
                                <span slot="default">
                                    <span class="ne-with-ref">[[content]]</span>
                                </span>
                                <span slot="alternate">[[label]]</span>
                            </pb-popover>
                        </pb:template>
                    </model>
                    <model behaviour="inline" cssClass="place"/>
                </elementSpec>
                <elementSpec ident="body" mode="change"/>
                <elementSpec ident="place" mode="add">
                    <model behaviour="pass-through">
                        <param name="place" value="if(./settlement)  then (./settlement/text())  else if(./district)  then (./district/text()) else (./country/text())"/>
                        <pb:template xmlns="" xml:space="preserve">[[place]]</pb:template>
                    </model>
                </elementSpec>
                <elementSpec ident="s" mode="change">
                    <model output="web" behaviour="pass-through">
                        <desc>Render language specific s as spans in paragraphs</desc>
                        <param name="language" value="@xml:lang/string()"/>
                        <pb:template xmlns="" xml:space="preserve">
                            <span class="lang-[[language]]">[[content]]</span>
                        </pb:template>
                    </model>
                </elementSpec>
                <elementSpec ident="foreign" mode="change">
                    <model output="web" behaviour="pass-through">
                        <desc>Render language specific foreign as spans in paragraphs</desc>
                        <param name="language" value="@xml:lang/string()"/>
                        <pb:template xmlns="" xml:space="preserve">
                            <span class="lang-[[language]]">[[content]]</span>
                        </pb:template>
                    </model>
                </elementSpec>
                <elementSpec ident="ref" mode="change">
                    <model predicate="@target" behaviour="inline">
                        <param name="nr" value="fn:replace(@target, 'file', '')"/>
                        <pb:template xmlns="" xml:space="preserve">
                            <a target="_blank" href="file[[nr]]">[[content]]</a>
                        </pb:template>
                    </model>
                </elementSpec>
                <elementSpec ident="note" mode="change">
                    <model predicate="@type = 'footnote' and (@subtype = 'metadata' or ($parameters?view!='metadata' and exists(ancestor::summary)))" cssClass="footnote-metadata" behaviour="note">
                        <desc>Metadata or regest footnotes are processed but hidden with CSS to display them in the footnote list</desc>
                        <param name="place" value="@place"/>
                        <param name="label" value="@n"/>
                        <pb:template xmlns="" xml:space="preserve">
                            <span>[[content]]
                                <span className="footnote-metadata-hint">
                                    <pb-popover>
                                        <span slot="default">
                                            <iron-icon class="metadata-info-icon" id="info-outline" icon="info-outline"/>
                                        </span>
                                        <span slot="alternate">
                                            <pb-i18n key="metadata.footnote">(Fussnote zu Metadaten)</pb-i18n>
                                        </span>
                                    </pb-popover>
                                </span>
                            </span>
                        </pb:template>
                    </model>
                    <model predicate="@type = 'footnote'" behaviour="note">
                        <param name="place" value="@place"/>
                        <param name="label" value="@n"/>
                    </model>
                    <model predicate="@type = 'entity'" behaviour="omit">
                        <desc>Hide entity notes</desc>
                    </model>
                    <model behaviour="inline" cssClass="inline-remark"/>
                </elementSpec>
                <elementSpec ident="facsimile" mode="add">
                    <model behaviour="inline">
                        <param name="path" value="./ancestor-or-self::TEI/@xml:id"/>
                        <pb:template xmlns="" xml:space="preserve">
                            <pb-facs-link facs="api/iiif/[[path]]" emit="facsimile" emit-on-load=""/>
                        </pb:template>
                    </model>
                </elementSpec>
                <elementSpec ident="pb" mode="change">
                    <model predicate="not(@type = 'edition')" behaviour="break" useSourceRendition="true">
                        <param name="type" value="'page'"/>
                        <param name="label" value="(concat(if(@n) then concat(@n,' ') else '',if(@facs) then                   concat('@',@facs) else ''))"/>
                        <outputRendition xml:space="preserve">
                        display: block; margin-left: 4pt; color: grey; float: right;
                        </outputRendition>
                        <outputRendition xml:space="preserve" scope="before">
                        content: '[Page ';
                        </outputRendition>
                        <outputRendition xml:space="preserve" scope="after">
                        content: ']';
                        </outputRendition>
                    </model>
                </elementSpec>
                <elementSpec ident="cit" mode="add">
                    <model behaviour="inline">
                        <param name="text" value="./ref/text()"/>
                        <pb:template xmlns="" xml:space="preserve">
                            <span class="citation">[[text]]</span>
                        </pb:template>
                    </model>
                </elementSpec>
                <elementSpec ident="div" mode="change">
                    <model predicate="@corresp" behaviour="section">
                        <param name="regest-div-id" value="@corresp"/>
                        <pb:template xmlns="" xml:space="preserve">
                            <div class="link-regest" id="link-[[regest-div-id]]">[[content]]</div>
                        </pb:template>
                    </model>
                    <model behaviour="block"></model>
                </elementSpec>
                <elementSpec ident="p" mode="change">
                    <model predicate="exists(ancestor::summary)" behaviour="paragraph">
                        <param name="regest-div-id" value="@xml:id"/>
                        <pb:template xmlns="" xml:space="preserve">
                            <span>[[content]]</span>
                            <a class="link-regest" href="#link-[[regest-div-id]]">
                                <iron-icon icon="expand-more"/>
                            </a>
                        </pb:template>
                    </model>
                    <model behaviour="paragraph"></model>
                </elementSpec>
                <elementSpec ident="lb" mode="change">
                    <model behaviour="inline" predicate="let $id := @xml:id || '-0'   return exists(id($id, .))">
                        <param name="order" value="tokenize(@xml:id, '\D+')[. ne ''][1]" />
                        <param name="coordinates" value="let $id := @xml:id || '-0'   return ext:convert-polygon-to-coordinates(id($id, .)/@points)" />
                        <pb:template xmlns="" xml:space="preserve">
                            <br />
                            <pb-facs-link class="facs-link-hidden" emit="facsimile" order="[[order]]" subscribe="facsimile" coordinates="[[coordinates]]"></pb-facs-link>
                        </pb:template>
                    </model>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>